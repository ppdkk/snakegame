#include <SFML/Graphics.hpp>
#include <iostream>
#include <cstdlib>
#include <vector>
#include <string>
#include <fstream>

#define FIELD_CELL_TYPE_FOOD -1
#define FIELD_CELL_TYPE_NONE 0
#define DIRECTION_UP 0
#define DIRECTION_DOWN 2
#define DIRECTION_RIGHT 1
#define DIRECTION_LEFT 3
#define MENU_MAIN 0
#define MENU_SETTINGS 1
#define MENU_SPEED 2

const int field_size_x = 35;//width
const int field_size_y = 25;//height ксть клітинок
const int cell_size = 32;   //розмір однієї клітинки
const int score_bar_height = 75;
const int window_width = field_size_x * cell_size ;
const int window_height = field_size_y * cell_size + score_bar_height;

int field[field_size_y][field_size_x]; //матриця, яка буде нашим полем, висота/ширина
int snake_position_x = field_size_x/4;
int snake_position_y = field_size_y/5;
int snake_length = 4;
int snake_direction = DIRECTION_RIGHT;
int score = 0;
int temp_score = 0;
int best_score = 0;
int current_menu = MENU_MAIN;
int current_menu_item_index = 0;
int current_settings_menu_item_index = 0;
int current_speed_menu_item_index = 0;
int game_over_timeout = 0;
int snake_speed = 85;

bool game_over = false;
bool game_paused = false;
bool game_start = false;

sf::Font font_score;
sf::Text text_score;
sf::Font font_menu_items;
std::vector<sf::Text> text_menu_items;
std::vector<std::string> menu_items = {"Start new game", "Settings", "Quit"};
std::vector<sf::Text> text_settings_menu_items;
std::vector<std::string> settings_menu_items = {"Back to main menu", "Speed"};
std::vector<sf::Text> text_speed_menu_items;
std::vector<std::string> speed_menu_items = {"Easy", "Average", "Hard"};


int get_random_empty_cell()
{
    int emptyCellCount = 0;
    for (int i = 0; i < field_size_y; i++)
    {
        for (int j=0; j < field_size_x; j++)
        {
            if (field[i][j] == FIELD_CELL_TYPE_NONE)
            {
                emptyCellCount++;
            }
        }
    }
    int targetEmptyCellIndex = rand()%emptyCellCount;
    int emptyCellIndex = 0;
    for (int i = 0; i < field_size_y; i++)
    {
        for (int j=0; j < field_size_x; j++)
        {
            if (field[i][j] == FIELD_CELL_TYPE_NONE)
            {
                if (emptyCellIndex == targetEmptyCellIndex)
                {
                    return j * field_size_x + i;
                }
                emptyCellIndex++;
            }
        }
    }
    return -1;
}

void add_food()
{
    int food_pos = get_random_empty_cell();
    if (food_pos != -1)
    {
        field[food_pos % field_size_y][food_pos % field_size_x] = FIELD_CELL_TYPE_FOOD;
    }
}


void clear_field()
{
    for (int i = 0; i < field_size_y; i++)
    {
        for (int j=0; j < field_size_x; j++)
        {
            field[i][j] = FIELD_CELL_TYPE_NONE; //очищуємо матрицю
        }
    }
    for (int i = 0; i < snake_length; i++) //cтворюємо змійку, голова має розмір змійки, зменшується з кожним елементом, хвіст 1
    {
        field[snake_position_y][snake_position_x - i] = snake_length - i;
    }
    add_food();
}

void init()
{
    font_menu_items.loadFromFile("C:\\Users\\Karina\\CLionProjects\\untitled1\\cmake-build-debug\\fonts\\score.ttf");

    for (int i = 0; i < menu_items.size(); i++) {
        text_menu_items.emplace_back(sf::Text());
        text_menu_items.back().setString(menu_items.at(i));
        text_menu_items.back().setFont(font_menu_items);
        text_menu_items.back().setCharacterSize(65);
    }
    for (int i = 0; i < settings_menu_items.size(); i++) {
        text_settings_menu_items.emplace_back(sf::Text());
        text_settings_menu_items.back().setString(settings_menu_items.at(i));
        text_settings_menu_items.back().setFont(font_menu_items);
        text_settings_menu_items.back().setCharacterSize(65);
    }
    for (int i = 0; i < speed_menu_items.size(); i++) {
        text_speed_menu_items.emplace_back(sf::Text());
        text_speed_menu_items.back().setString(speed_menu_items.at(i));
        text_speed_menu_items.back().setFont(font_menu_items);
        text_speed_menu_items.back().setCharacterSize(65);
    }
}

void start_game()
{
    snake_position_x = field_size_x/4;
    snake_position_y = field_size_y/5;
    snake_length = 4;
    snake_direction = DIRECTION_RIGHT;
    score = 0;

    game_start = true;
    game_over = false;
    game_paused = false;
    clear_field();
}

void finish_game()
{
    game_over = true;
    game_paused = true;
    game_over_timeout = 20;
}

void draw_field(sf::RenderWindow &window)
{
    sf::Texture snake_texture;
    snake_texture.loadFromFile("C:\\Users\\Karina\\CLionProjects\\untitled1\\cmake-build-debug\\images\\snake4.png");
    sf::Sprite snake;
    snake.setTexture(snake_texture);


    sf::Texture none_texture;
    none_texture.loadFromFile("C:\\Users\\Karina\\CLionProjects\\untitled1\\cmake-build-debug\\images\\none1.png");
    sf::Sprite none;
    none.setTexture(none_texture);

    sf::Texture apple_texture;
    apple_texture.loadFromFile("C:\\Users\\Karina\\CLionProjects\\untitled1\\cmake-build-debug\\images\\food.png");
    sf::Sprite apple;
    apple.setTexture(apple_texture);

    for (int i = 0; i < field_size_y; i++)
    {
        for (int j=0; j < field_size_x; j++)
        {
            switch (field[i][j])
            {
                case FIELD_CELL_TYPE_NONE:
                    none.setPosition(j*cell_size, (i*cell_size) + score_bar_height);
                    window.draw(none);
                    break;
                case FIELD_CELL_TYPE_FOOD:
                    apple.setPosition(j*cell_size, (i*cell_size) + score_bar_height);
                    window.draw(apple);
                    break;
                default:
                    snake.setPosition(j*cell_size, i*cell_size + score_bar_height);
                    window.draw(snake);
                    break;

            }
        }
    }
}

void draw_score_bar(sf::RenderWindow &window)
{
    sf::Font font_score;
    font_score.loadFromFile("C:\\Users\\Karina\\CLionProjects\\untitled1\\cmake-build-debug\\fonts\\score.ttf");
    sf::Text text_score;
    text_score.setFont(font_score);


    text_score.setString("Score: " + std::to_string(score));
    text_score.setCharacterSize(40);
    text_score.setFillColor(sf::Color::Black);
    text_score.setPosition(window_width - text_score.getLocalBounds().width - 20, 20);


    window.draw(text_score);
}

void draw_menu(sf::RenderWindow &window)
{
    float const menu_padding_horizontal = 40;
    float const menu_padding_vertical = 30;

    float menu_item_max_width = 0, current_menu_item_offset_y = 0;
    for(int i = 0; i<text_menu_items.size(); i++ )
    {
        text_menu_items.at(i).setPosition(0, current_menu_item_offset_y);
        text_menu_items.at(i).setFillColor(current_menu_item_index == i ? sf::Color(245,245,245): sf::Color(240,240,240,180));
        current_menu_item_offset_y+=text_menu_items.at(i).getLocalBounds().height + 20;
        menu_item_max_width = std::max(menu_item_max_width, text_menu_items.at(i).getLocalBounds().width);
    }

    float const menu_width = menu_item_max_width + menu_padding_horizontal*2;
    float const menu_height = current_menu_item_offset_y  + menu_padding_vertical*2;

    float const menu_position_x = (window_width - menu_width) / 2;
    float const menu_position_y = (window_height - menu_height) / 2;



    sf::RectangleShape menu_rect(sf::Vector2f(menu_width, menu_height));
    menu_rect.setPosition(menu_position_x, menu_position_y);
    menu_rect.setFillColor(sf::Color(186,210,255, 200));
    window.draw(menu_rect);

    for (int i = 0; i < text_menu_items.size(); i++)
    {
        text_menu_items.at(i).move(menu_position_x + menu_padding_horizontal, menu_position_y + menu_padding_vertical-7);
        window.draw(text_menu_items.at(i));
    }

}
void draw_settings_menu(sf::RenderWindow &window)
{//232,240,255
    float const menu_padding_horizontal = 40;
    float const menu_padding_vertical = 30;

    float menu_item_max_width = 0, current_menu_item_offset_y = 0;
    for(int i = 0; i<text_settings_menu_items.size(); i++ )
    {
        text_settings_menu_items.at(i).setPosition(0, current_menu_item_offset_y);
        text_settings_menu_items.at(i).setFillColor(current_settings_menu_item_index == i ? sf::Color(245,245,245): sf::Color(240,240,240,180));
        current_menu_item_offset_y+=text_settings_menu_items.at(i).getLocalBounds().height + 20;
        menu_item_max_width = std::max(menu_item_max_width, text_settings_menu_items.at(i).getLocalBounds().width);
    }

    float const menu_width = menu_item_max_width + menu_padding_horizontal*2;
    float const menu_height = current_menu_item_offset_y  + menu_padding_vertical*2;

    float const menu_position_x = (window_width - menu_width) / 2;
    float const menu_position_y = (window_height - menu_height) / 2;



    sf::RectangleShape menu_rect(sf::Vector2f(menu_width, menu_height));
    menu_rect.setPosition(menu_position_x, menu_position_y);
    menu_rect.setFillColor(sf::Color(186,210,255, 200));
    window.draw(menu_rect);

    for (int i = 0; i < text_settings_menu_items.size(); i++)
    {
        text_settings_menu_items.at(i).move(menu_position_x + menu_padding_horizontal, menu_position_y + menu_padding_vertical-7);
        window.draw(text_settings_menu_items.at(i));
    }

}

void draw_speed_menu(sf::RenderWindow& window)
{//232,240,255
    float const menu_padding_horizontal = 40;
    float const menu_padding_vertical = 30;

    float menu_item_max_width = 0, current_menu_item_offset_y = 0;
    for (int i = 0; i < text_speed_menu_items.size(); i++)
    {
        text_speed_menu_items.at(i).setPosition(0, current_menu_item_offset_y);
        text_speed_menu_items.at(i).setFillColor(current_speed_menu_item_index == i ? sf::Color(245, 245, 245) : sf::Color(240, 240, 240, 180));
        current_menu_item_offset_y += text_speed_menu_items.at(i).getLocalBounds().height + 20;
        menu_item_max_width = std::max(menu_item_max_width, text_speed_menu_items.at(i).getLocalBounds().width);
    }

    float const menu_width = menu_item_max_width + menu_padding_horizontal * 2;
    float const menu_height = current_menu_item_offset_y + menu_padding_vertical * 2;

    float const menu_position_x = (window_width - menu_width) / 2;
    float const menu_position_y = (window_height - menu_height) / 2;



    sf::RectangleShape menu_rect(sf::Vector2f(menu_width, menu_height));
    menu_rect.setPosition(menu_position_x, menu_position_y);
    menu_rect.setFillColor(sf::Color(186, 210, 255, 200));
    window.draw(menu_rect);

    for (int i = 0; i < text_speed_menu_items.size(); i++)
    {
        text_speed_menu_items.at(i).move(menu_position_x + menu_padding_horizontal, menu_position_y + menu_padding_vertical - 7);
        window.draw(text_speed_menu_items.at(i));
    }

}

void end_game(sf::RenderWindow &window, std::string strRes, int size)
{

    sf::Font font_end;
    font_end.loadFromFile("C:\\Users\\Karina\\CLionProjects\\untitled1\\cmake-build-debug\\fonts\\score.ttf");
    sf::Text text_game_over;
    text_game_over.setFont(font_end);
    text_game_over.setString(strRes);
    text_game_over.setCharacterSize(size);

    text_game_over.setFillColor(sf::Color::Red);
    text_game_over.setPosition((window_width - text_game_over.getLocalBounds().width) / 2,
                               (window_height - text_game_over.getLocalBounds().height) / 2 - score_bar_height);
    window.draw(text_game_over);
}
void make_move()
{
        switch (snake_direction) {
            case DIRECTION_RIGHT:
                snake_position_x++;
                if (snake_position_x > field_size_x - 1) {
                    snake_position_x = 0;
                }
                break;
            case DIRECTION_UP:
                snake_position_y--;
                if (snake_position_y < 0) {
                    snake_position_y = field_size_y - 1;
                }
                break;
            case DIRECTION_LEFT:
                snake_position_x--;
                if (snake_position_x < 0) {
                    snake_position_x = field_size_x - 1;
                }
                break;
            case DIRECTION_DOWN:
                snake_position_y++;
                if (snake_position_y > field_size_y - 1) {
                    snake_position_y = 0;
                }
                break;
        }

    if (field[snake_position_y][snake_position_x]!=FIELD_CELL_TYPE_NONE)
    {
        switch (field[snake_position_y][snake_position_x])
        {
            case FIELD_CELL_TYPE_FOOD:
                snake_length++;
                score++;
                add_food();
                break;

            default:
                finish_game();
        }


    }

field[snake_position_y][snake_position_x] = snake_length + 1;

    for (int i = 0; i < field_size_y; i++)
    {
        for (int j=0; j < field_size_x; j++)
        {
            if(field[i][j]>FIELD_CELL_TYPE_NONE)
            {
                field[i][j]--;
            }
        }
    }
}

void handle_keyboard(sf::RenderWindow &window)
{
    if (game_paused)
    {
        if(current_menu == MENU_MAIN) {
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) {
                current_menu_item_index--;
                if (current_menu_item_index < 0) {
                    current_menu_item_index = text_menu_items.size() - 1;
                }

            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down)) {
                current_menu_item_index++;
                if (current_menu_item_index > text_menu_items.size() - 1) {
                    current_menu_item_index = 0;
                }

            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Enter)) {
                if (menu_items.at(current_menu_item_index) == "Start new game") {
                    start_game();
                }
                if (menu_items.at(current_menu_item_index) == "Settings") {
                    current_menu = MENU_SETTINGS;
                    current_menu_item_index = 0;
                }
                if (menu_items.at(current_menu_item_index) == "Quit") {
                    window.close();
                }
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape)) {
                if (!game_over && game_start) {
                    game_paused = false;
                }
            }
        }
        else if (current_menu == MENU_SETTINGS)
        {
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) {
                current_settings_menu_item_index--;
                if (current_settings_menu_item_index < 0) {
                    current_settings_menu_item_index = text_settings_menu_items.size() - 1;
                }

            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down)) {
                current_settings_menu_item_index++;
                if (current_settings_menu_item_index > text_settings_menu_items.size() - 1) {
                    current_settings_menu_item_index = 0;
                }

            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Enter)) {
                if (settings_menu_items.at(current_menu_item_index) == "Back to main menu") {
                    current_menu = MENU_MAIN;
                }
                if (settings_menu_items.at(current_settings_menu_item_index) == "Speed") {
                    current_menu = MENU_SPEED;
                }
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape)){
                current_menu = MENU_MAIN;
            }
        }
        else if (current_menu == MENU_SPEED)
            {
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) {
                    current_speed_menu_item_index--;
                    if (current_speed_menu_item_index < 0) {
                        current_speed_menu_item_index = text_speed_menu_items.size() - 1;
                    }

                }
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down)) {
                    current_speed_menu_item_index++;
                    if (current_speed_menu_item_index > text_speed_menu_items.size() - 1) {
                        current_speed_menu_item_index = 0;
                    }

                }
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::Enter)) {
                    if (speed_menu_items.at(current_speed_menu_item_index) == "Easy") {
                        current_menu = MENU_MAIN;
                        snake_speed = 120;
                    }
                    if (speed_menu_items.at(current_speed_menu_item_index) == "Average") {
                        current_menu = MENU_MAIN;
                        snake_speed = 85;
                    }
                    if (speed_menu_items.at(current_speed_menu_item_index) == "Hard") {
                        current_menu = MENU_MAIN;
                        snake_speed = 40;
                    }
                }
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape)){
                    current_menu = MENU_MAIN;
                }

        }

    }
    else {
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) {
            if (snake_direction != DIRECTION_DOWN) {
                snake_direction = DIRECTION_UP;
            }
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down)) {
            if (snake_direction != DIRECTION_UP) {
                snake_direction = DIRECTION_DOWN;
            }
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)) {
            if (snake_direction != DIRECTION_LEFT) {
                snake_direction = DIRECTION_RIGHT;
            }
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)) {
            if (snake_direction != DIRECTION_RIGHT) {
                snake_direction = DIRECTION_LEFT;
            }
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape)) {
            game_paused = true;
        }
    }
}

int main()
{
    srand(time(NULL));
    sf::RenderWindow window(sf::VideoMode(window_width, window_height), "Snake! Play a game!"); //відкриваємо вікно, яке називаємо снейк
    std::string path = "scoreBest.txt";
    std::ofstream fout;
    clear_field();
    init();
    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        if (!game_paused) {
            make_move();
        }


        window.clear(sf::Color(255,215,156));




        draw_field(window);
        draw_score_bar(window);

        std::ifstream fin;
        fin.open(path);
        fin >> best_score;
        if (game_over)
        {

            if (best_score<score){
                for(int i = 0; i < 700; i++){
                end_game(window, "New record: " + std::to_string(score) + "!", 180);}
               // sf::sleep(sf::milliseconds(2000));
            }
            else if (best_score>=score){end_game(window, "GAME OVER!", 200);}
            if (game_over_timeout > 0)
            {
                game_over_timeout--;
            }
             if (best_score<score)
             {
                 fout.open(path);
                 fout << score;
                 fout.close();
             }
        }
        if(game_paused && game_over_timeout == 0)
        {
            switch (current_menu) {
                case MENU_MAIN:
                    draw_menu(window);
                    break;
                case MENU_SETTINGS:
                    draw_settings_menu(window);
                    break;
                case MENU_SPEED:
                    draw_speed_menu(window);
                    break;
            }
        }


        handle_keyboard(window);

        window.display();
        int a = 70;
        sf::sleep(sf::milliseconds(snake_speed));
    }

    return 0;
}
